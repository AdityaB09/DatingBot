from datetime import datetime

from aiogram import types
from aiogram.types import CallbackQuery

from keyboards.inline.back_inline import only_back_keyboard
from keyboards.inline.guide_inline import create_pagination_keyboard, guide_callback
from keyboards.inline.settings_menu import information_keyboard
from loader import dp, _
from utils.db_api import db_commands


@dp.callback_query_handler(text="information")
async def get_information(call: CallbackQuery):
    start_date = datetime(2021, 8, 10, 14, 0)
    now_date = datetime.now()
    delta = now_date - start_date
    count_users = await db_commands.count_users()
    txt = (f"–í—ã –ø–æ–ø–∞–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b> –±–æ—Ç–∞, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É,"
           f"–∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –±—Ä–µ–Ω–¥–±—É–∫.\n\n"
           f"üåê –î–Ω–µ–π —Ä–∞–±–æ—Ç–∞–µ–º: <b>{delta.days}</b>\n"
           f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{count_users}</b>\n")
    await call.message.edit_text(
        text=txt,
        reply_markup=await information_keyboard()
    )


async def send_photo_with_caption(
        call: CallbackQuery,
        photo: str,
        caption: str,
        step: int,
        total_steps: int,
) -> None:
    markup = await create_pagination_keyboard(step, total_steps)

    await call.message.delete()
    await call.message.answer_photo(types.InputFile(photo), reply_markup=markup, caption=caption)


@dp.callback_query_handler(text="guide")
async def get_guide(call: CallbackQuery) -> None:
    await send_photo_with_caption(
        call=call,
        photo=r"brandbook/first_page.png",
        caption=_("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É: \n<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ1</b>"),
        step=1,
        total_steps=4
    )


@dp.callback_query_handler(guide_callback.filter(action="forward"))
async def get_forward(call: CallbackQuery, callback_data: dict) -> None:
    step = int(callback_data.get("value"))
    if step == 2:
        await send_photo_with_caption(
            call=call,
            photo=r"brandbook/second_page.png",
            caption=_("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É: \n<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ2</b>"),
            step=2,
            total_steps=4
        )
    elif step == 3:
        await send_photo_with_caption(
            call=call,
            photo=r"brandbook/third_page.png",
            caption=_("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É: \n<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ3</b>"),
            step=3,
            total_steps=4
        )
    elif step == 4:
        await send_photo_with_caption(
            call=call,
            photo=r"brandbook/fourth_page.png",
            caption=_("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É: \n<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ4</b>"),
            step=4,
            total_steps=4
        )


@dp.callback_query_handler(guide_callback.filter(action="backward"))
async def get_backward(call: CallbackQuery, callback_data: dict) -> None:
    step = int(callback_data.get("value"))

    if step == 1:
        await send_photo_with_caption(
            call=call,
            photo=r"brandbook/first_page.png",
            caption=_("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É: \n<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ1</b>"),
            step=1,
            total_steps=4
        )
    elif step == 2:
        await send_photo_with_caption(
            call=call,
            photo=r"brandbook/second_page.png",
            caption=_("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É: \n<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ2</b>"),
            step=2,
            total_steps=4
        )
    elif step == 3:
        await send_photo_with_caption(
            call=call,
            photo=r"brandbook/third_page.png",
            caption=_("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±–æ—Ç—É: \n<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Ññ3</b>"),
            step=3,
            total_steps=4
        )


@dp.callback_query_handler(text="contacts")
async def contacts_menu(call: CallbackQuery):
    await call.message.edit_text(
        text=(
            "üìß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–∞–∑–¥–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n\n"
            "–ù–∞—à —Å–∞–π—Ç: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        ),
        reply_markup=await only_back_keyboard(menu="information")
    )
