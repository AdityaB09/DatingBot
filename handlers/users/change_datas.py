from keyboards.inline.lifestyle_choice_inline import lifestyle_inline_kb
from keyboards.inline.change_profile_inline import change_profile_kb
from aiogram.utils.exceptions import MessageToReplyNotFound
from aiogram.types import CallbackQuery, ContentType
from keyboards.inline.main_menu import inline_start
from states.new_data_state import NewData
from aiogram.dispatcher import FSMContext
from loader import dp, bot, db
from aiogram import types


@dp.callback_query_handler(text='change_profile')
async def start_change_data(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.send_message(call.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: ', reply_markup=change_profile_kb)


@dp.message_handler(text='–ò–º—è')
async def change_name(message: types.Message):
    await message.reply(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è')
    await NewData.name.set()


@dp.message_handler(state=NewData.name)
async def change_name(message: types.Message, state: FSMContext):
    try:
        await db.update_user_varname(varname=message.text, telegram_id=message.from_user.id)
        await message.reply(f'–í–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è: <b>{message.text}</b>', reply_markup=types.ReplyKeyboardRemove())

        await state.reset_state()
    except MessageToReplyNotFound:
        await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await state.reset_state()

    await state.reset_state()

    await message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                         "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                         "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                         "@DRomanovizc", reply_markup=inline_start)


@dp.message_handler(text='–í–æ–∑—Ä–∞—Å—Ç')
async def change_age(message: types.Message):
    await message.reply(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
    await NewData.age.set()


@dp.message_handler(state=NewData.age)
async def change_age(message: types.Message, state: FSMContext):
    try:
        await db.update_user_age(age=message.text, telegram_id=message.from_user.id)
        await message.reply(f'–í–∞—à –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç: <b>{message.text}</b>', reply_markup=types.ReplyKeyboardRemove())
        await state.reset_state()

    except MessageToReplyNotFound:
        await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await state.reset_state()

    await state.reset_state()
    await message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                         "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                         "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                         "@DRomanovizc", reply_markup=inline_start)


@dp.message_handler(text='–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å')
async def change_nationality(message: types.Message):
    await message.reply(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å')
    await NewData.nationality.set()


@dp.message_handler(state=NewData.nationality)
async def change_nationality(message: types.Message, state: FSMContext):
    try:
        await db.update_user_national(national=message.text, telegram_id=message.from_user.id)
        await message.reply(f'–í–∞—à–∞ –Ω–æ–≤–∞—è –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: <b>{message.text}</b>',
                            reply_markup=types.ReplyKeyboardRemove())
        await state.reset_state()
    except MessageToReplyNotFound:
        await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await state.reset_state()

    await state.reset_state()
    await message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                         "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                         "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                         "@DRomanovizc", reply_markup=inline_start)


@dp.message_handler(text='–ì–æ—Ä–æ–¥')
async def change_city(message: types.Message):
    await message.reply(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥')
    await NewData.city.set()


@dp.message_handler(state=NewData.city)
async def change_city(message: types.Message, state: FSMContext):
    try:
        await db.update_user_city(city=message.text, telegram_id=message.from_user.id)
        await message.reply(f'–í–∞—à –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥: <b>{message.text}</b>', reply_markup=types.ReplyKeyboardRemove())
        await state.reset_state()
    except MessageToReplyNotFound:
        await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await state.reset_state()

    await state.reset_state()
    await message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                         "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                         "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                         "@DRomanovizc", reply_markup=inline_start)


@dp.message_handler(text='–ü–æ–ª')
async def change_sex(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–ú—É–∂—Å–∫–æ–π', callback_data='male')
    keyboard.add(btn1)
    btn2 = types.InlineKeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–π', callback_data='female')
    keyboard.add(btn2)
    await message.reply(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª: ', reply_markup=keyboard)
    await NewData.sex.set()


@dp.callback_query_handler(text='male', state=NewData.sex)
@dp.callback_query_handler(text='female', state=NewData.sex)
async def change_sex(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    if call.data == 'male':
        try:
            await db.update_user_sex(sex='–ú—É–∂—Å–∫–æ–π', telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–í–∞—à –Ω–æ–≤—ã–π –ø–æ–ª: <b>–ú—É–∂—Å–∫–æ–π</b>',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()

    if call.data == 'female':
        try:
            await db.update_user_sex(sex='–ñ–µ–Ω—Å–∫–∏–π', telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–í–∞—à –Ω–æ–≤—ã–π –ø–æ–ª: <b>–ñ–µ–Ω—Å–∫–∏–π</b>',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()

    await state.reset_state()
    await call.message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                              "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                              "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                              "@DRomanovizc", reply_markup=inline_start)


@dp.message_handler(text='–ú–∞—à–∏–Ω–∞')
async def change_car(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–ï—Å—Ç—å', callback_data='true')
    keyboard.add(btn1)
    btn2 = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='false')
    keyboard.add(btn2)
    await message.reply(f'–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –º–∞—à–∏–Ω–∞?: ', reply_markup=keyboard)
    await NewData.car.set()


@dp.callback_query_handler(text='true', state=NewData.car)
@dp.callback_query_handler(text='false', state=NewData.car)
async def change_car(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    if call.data == 'true':
        try:
            await db.update_user_car(car=True, telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: <b>–µ—Å—Ç—å</b> –º–∞—à–∏–Ω–∞',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()
    if call.data == 'false':
        try:
            await db.update_user_car(car=False, telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: <b>–Ω–µ—Ç</b> –º–∞—à–∏–Ω—ã',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()

    await state.reset_state()
    await call.message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                              "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                              "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                              "@DRomanovizc", reply_markup=inline_start)


@dp.message_handler(text='–î–µ—Ç–∏')
async def change_kids(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–ï—Å—Ç—å', callback_data='true')
    keyboard.add(btn1)
    btn2 = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='false')
    keyboard.add(btn2)
    await message.reply(f'–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –¥–µ—Ç–∏?: ', reply_markup=keyboard)
    await NewData.child.set()


@dp.callback_query_handler(text='true', state=NewData.child)
@dp.callback_query_handler(text='false', state=NewData.child)
async def change_children(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    if call.data == 'true':
        try:
            await db.update_user_kids(kids=True, telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: <b>–µ—Å—Ç—å</b> –¥–µ—Ç–∏',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()
    if call.data == 'false':
        try:
            await db.update_user_kids(kids=False, telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: <b>–Ω–µ—Ç</b> –¥–µ—Ç–µ–π',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()

    await state.reset_state()
    await call.message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                              "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                              "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                              "@DRomanovizc", reply_markup=inline_start)


@dp.message_handler(text='–ñ–∏–ª—å–µ')
async def change_home(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–ï—Å—Ç—å', callback_data='true')
    keyboard.add(btn1)
    btn2 = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='false')
    keyboard.add(btn2)
    await message.reply(f'–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –∫–≤–∞—Ä—Ç–∏—Ä–∞: ', reply_markup=keyboard)
    await NewData.own_home.set()


@dp.callback_query_handler(text='true', state=NewData.own_home)
@dp.callback_query_handler(text='false', state=NewData.own_home)
async def change_home(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    if call.data == 'true':
        try:
            await db.update_user_apartment(apartment=True, telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: <b>–µ—Å—Ç—å</b> –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()
    if call.data == 'false':
        try:
            await db.update_user_apartment(apartment=False, telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: <b>–Ω–µ—Ç</b> –∫–≤–∞—Ä—Ç–∏—Ä—ã',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()

    await state.reset_state()
    await call.message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                              "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                              "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                              "@DRomanovizc", reply_markup=inline_start)


@dp.message_handler(text='–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')
async def change_education(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text='–í—ã—Å—à–µ–µ', callback_data='higher_edu')
    keyboard.add(btn1)
    btn2 = types.InlineKeyboardButton(text='–°—Ä–µ–¥–Ω–µ–µ', callback_data='secondary_edu')
    keyboard.add(btn2)
    await message.reply(f'–ö–∞–∫–æ–µ —É –í–∞—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ', reply_markup=keyboard)
    await NewData.education.set()


@dp.callback_query_handler(text='higher_edu', state=NewData.education)
@dp.callback_query_handler(text='secondary_edu', state=NewData.education)
async def change_education(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    if call.data == 'higher_edu':
        try:
            await db.update_user_apartment(apartment=True, telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: <b>–í—ã—Å—à–µ–µ</b> –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()
    if call.data == 'secondary_edu':
        try:
            await db.update_user_apartment(apartment=False, telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: <b>–°—Ä–µ–¥–Ω–µ–µ</b> –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()

    await state.reset_state()
    await call.message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                              "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                              "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                              "@DRomanovizc", reply_markup=inline_start)


@dp.message_handler(text='–ó–∞–Ω—è—Ç–∏–µ')
async def change_style(message: types.Message):
    await message.reply(f'–ß–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?', reply_markup=lifestyle_inline_kb)
    await NewData.hobbies.set()


@dp.callback_query_handler(state=NewData.hobbies,
                           text_contains=['study_lifestyle'])
@dp.callback_query_handler(state=NewData.hobbies,
                           text_contains=['work_lifestyle'])
@dp.callback_query_handler(state=NewData.hobbies,
                           text_contains=['job_find_lifestyle'])
@dp.callback_query_handler(state=NewData.hobbies,
                           text_contains=['householder_lifestyle'])
async def change_style(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    if call.data == 'study_lifestyle':
        try:
            await db.update_user_lifestyle(lifestyle='–£—á—É—Å—å', telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∏—Ç–µ—Å—å!',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()
    elif call.data == 'work_lifestyle':
        try:
            await db.update_user_lifestyle(lifestyle='–†–∞–±–æ—Ç–∞—é', telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ!',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()
    elif call.data == 'job_find_lifestyle':
        try:
            await db.update_user_lifestyle(lifestyle='–ò—â—É —Ä–∞–±–æ—Ç—É', telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å –≤—ã –∏—â–µ—Ç–µ —Ä–∞–±–æ—Ç—É!',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()
    elif call.data == 'householder_lifestyle':
        try:
            await db.update_user_lifestyle(lifestyle='–î–æ–º–æ—Ö–æ–∑—è–π–∫–∞/–î–æ–º–æ—Ö–æ–∑—è–∏–Ω', telegram_id=call.from_user.id)
            await bot.send_message(call.from_user.id, f'–¢–µ–ø–µ—Ä—å –≤—ã –¥–æ–º–æ—Ö–æ–∑—è–∏–Ω/–¥–æ–º–æ—Ö–æ–∑—è–π–∫–∞!',
                                   reply_markup=types.ReplyKeyboardRemove())
            await state.reset_state()
        except MessageToReplyNotFound:
            await bot.send_message(call.from_user.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await state.reset_state()

    await state.reset_state()
    await call.message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                              "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                              "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                              "@DRomanovizc", reply_markup=inline_start)


@dp.message_handler(text='–§–æ—Ç–æ')
async def new_photo(message: types.Message):
    await message.reply(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
    await NewData.photo.set()


@dp.message_handler(content_types=ContentType.PHOTO, state=NewData.photo)
async def update_photo_complete(message: types.Message, state: FSMContext):
    file_id = message.photo[0].file_id
    try:
        await db.update_user_photo_id(photo_id=file_id, telegram_id=message.from_user.id)
        await message.reply(f'–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!',
                            reply_markup=types.ReplyKeyboardRemove())
        await state.reset_state()
    except MessageToReplyNotFound:
        await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. \n'
                            f'–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
        await state.reset_state()
    await message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                         "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                         "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                         "@DRomanovizc", reply_markup=inline_start)


@dp.message_handler(text='–û —Å–µ–±–µ')
async def new_comment(message: types.Message):
    await message.reply(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã: ')
    await NewData.commentary.set()


@dp.message_handler(state=NewData.commentary)
async def update_comment_complete(message: types.Message, state: FSMContext):
    try:
        await db.update_user_commentary(commentary=message.text, telegram_id=message.from_user.id)
        await message.reply(f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏–Ω—è—Ç!',
                            reply_markup=types.ReplyKeyboardRemove())
        await state.reset_state()
    except MessageToReplyNotFound:
        await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. '
                            f'–í–æ–∑–º–æ–∂–Ω–æ, –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ\n'
                            f'–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
        await state.reset_state()
    await message.answer("<b>‚ù§Ô∏èÔ∏è DATE_BOT</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n\n"
                         "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                         "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ - "
                         "@DRomanovizc", reply_markup=inline_start)
