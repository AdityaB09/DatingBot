import random

import aiogram
from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import CallbackQuery
from aiogram.utils.exceptions import BadRequest
from django.db import IntegrityError

from data.config import load_config
from filters import IsPrivate
from functions.main_app.app_scheduler import send_message_week
from functions.main_app.auxiliary_tools import registration_menu
from handlers.users.back import delete_message
from keyboards.inline.language_inline import language_keyboard
from keyboards.inline.main_menu_inline import start_keyboard
from loader import dp, scheduler, _, bot
from utils.db_api import db_commands


@dp.message_handler(IsPrivate(), CommandStart())
async def register_user(message: types.Message) -> None:
    try:
        referrer_id = message.text[7:]
        if referrer_id != "" and referrer_id != message.from_user.id:
            await db_commands.add_user(
                name=message.from_user.full_name,
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                referrer_id=referrer_id
            )
            await bot.send_message(chat_id=referrer_id,
                                   text="–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {}!".format(
                                       message.from_user.username))
        else:
            await db_commands.add_user(
                name=message.from_user.full_name,
                telegram_id=message.from_user.id,
                username=message.from_user.username
            )
        await db_commands.add_meetings_user(telegram_id=message.from_user.id,
                                            username=message.from_user.username)
        if message.from_user.id in load_config().tg_bot.admin_ids:
            await db_commands.add_user_to_settings(telegram_id=message.from_user.id)
    except IntegrityError as ex:
        err = str(ex).split()
        if err[0:2] == ['null', 'value']:
            await message.answer(_(
                "–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,"
                " –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–π—Ç–µ username.\n"
                "<b>–ë–µ–∑ –Ω–µ–≥–æ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n"
                '<a href="{url1}">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Ññ1</a>\n'
                '<a href="{url2}">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Ññ2</a>').format(
                url1="https://www.youtube.com/watch?v=6fC_AUJemSo&ab_channel=TheTechnology",
                url2="https://www.youtube.com/watch?v=xc9K2NjvfLo&ab_channel=AlexTrack"
            ))
        elif err[0:2] == ['duplicate', 'key']:
            pass
    try:
        support = await db_commands.select_user(telegram_id=load_config().tg_bot.support_ids[0])
        markup = await start_keyboard(message)
        fullname = message.from_user.full_name

        heart = random.choice(['üíô', 'üíö', 'üíõ', 'üß°', 'üíú', 'üñ§', '‚ù§', 'ü§ç', 'üíñ', 'üíù'])
        await message.answer(_("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {fullname}!!\n\n"
                               "{heart} <b> QueDateBot </b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n\n"
                               "ü™ß –ù–æ–≤–æ—Å—Ç–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ - "
                               "https://t.me/QueDateGroup \n\n"
                               "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                               "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - "
                               "@{supports}\n\n").format(fullname=fullname, heart=heart,
                                                         supports=support['username']),
                             reply_markup=markup)
    except TypeError:
        pass


@dp.callback_query_handler(text="start_menu")
async def start_menu(call: CallbackQuery) -> None:
    try:
        await registration_menu(call, scheduler, send_message_week)
    except TypeError:
        await call.message.answer(_("–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω–æ–π"))


async def choice_language(call: CallbackQuery, menu: str) -> None:
    try:
        await call.message.edit_text(_("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"), reply_markup=await language_keyboard(menu))
    except BadRequest:
        await delete_message(call.message)
        await call.message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"), reply_markup=await language_keyboard(menu))


async def change_language(call: CallbackQuery, language: str) -> None:
    telegram_id = call.from_user.id
    try:
        await db_commands.update_user_data(telegram_id=telegram_id, language=language)
        await call.message.edit_text(_("–Ø–∑—ã–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", locale=language))
    except aiogram.utils.exceptions.MessageToDeleteNotFound:
        await call.message.edit_text(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"))


language_codes = {
    "Russian": "ru",
    "Deutsch": "de",
    "English": "en",
    "Indonesian": "id",
}

language_menus = {
    "language_reg": "registration",
    "language": "profile",
    "language_info": "information",
}


def register_callbacks(callback_dict, callback_function):
    for callback_text, value in callback_dict.items():
        dp.callback_query_handler(text=callback_text)(lambda call, value=value: callback_function(call, value))


register_callbacks(language_codes, change_language)
register_callbacks(language_menus, choice_language)
