import asyncio
import pathlib
from typing import NoReturn, Union

import asyncpg
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove, InputFile, InlineKeyboardMarkup
from loguru import logger

from functions.dating.get_data_filters_func import get_data_filters
from functions.main_app.get_data_func import get_data
from keyboards.inline.filters_inline import dating_filters_keyboard
from keyboards.inline.main_menu_inline import start_keyboard
from loader import _, bot
from utils.db_api import db_commands


async def choice_gender(call: CallbackQuery) -> NoReturn:
    """
    –§—É–Ω–∫—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∞—è –≤ –±–∞–∑—É –ø–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    if call.data == 'male':
        try:
            await db_commands.update_user_data(telegram_id=call.from_user.id, need_partner_sex='–ú—É–∂—Å–∫–æ–π')
        except asyncpg.exceptions.UniqueViolationError as err:
            logger.error(err)
    elif call.data == 'female':
        try:
            await db_commands.update_user_data(telegram_id=call.from_user.id, need_partner_sex='–ñ–µ–Ω—Å–∫–∏–π')
        except asyncpg.exceptions.UniqueViolationError as err:
            logger.error(err)


async def display_profile(call: CallbackQuery, markup) -> NoReturn:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_data = await get_data(call.from_user.id)
    text = _("{user_0}, "
             "{user_1} –ª–µ—Ç, "
             "{user_3} {user_6}\n\n"
             "{user_5}").format(user_0=str(user_data[0]), user_1=str(user_data[1]),
                                user_3=str(user_data[3]),
                                user_5=str(user_data[5]),
                                user_6=str(user_data[6]),
                                )
    text_2 = _("{user_0}, "
               "{user_1} –ª–µ—Ç, "
               "{user_3} {user_6}\n\n"
               "{user_5}\n\n"
               "<b>–ò–Ω—Å—Ç–∞–≥—Ä–∞–º</b> - <code>{user_8}</code>\n").format(user_0=str(user_data[0]),
                                                                    user_1=str(user_data[1]),
                                                                    user_3=str(user_data[3]),
                                                                    user_5=str(user_data[5]),
                                                                    user_6=str(user_data[6]),
                                                                    user_8=str(user_data[8]))
    text_3 = _("{user_0}, "
               "{user_1} –ª–µ—Ç, "
               "{user_3} {user_6}\n\n").format(user_0=str(user_data[0]),
                                               user_1=str(user_data[1]),
                                               user_3=str(user_data[3]),
                                               user_6=str(user_data[6]))
    if user_data[11] is None and user_data[8] == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª Instagram":
        await call.message.answer_photo(caption=text, photo=user_data[7], reply_markup=markup)
    elif user_data[11] is None:
        await call.message.answer_photo(caption=text_2,
                                        photo=user_data[7], reply_markup=markup)
    elif user_data[11] and user_data[8] == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª Instagram":
        await call.message.answer_photo(caption=text_3,
                                        photo=user_data[7], reply_markup=markup)
        await call.message.answer_voice(user_data[11], caption=_("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã"))
    else:
        await call.message.answer_photo(caption=text_2,
                                        photo=user_data[7], reply_markup=markup)
        await call.message.answer_voice(user_data[11], caption=_("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã"))


async def show_dating_filters(call: Union[CallbackQuery, None], message: Union[types.Message, None]):
    if message is None:
        user_data = await get_data_filters(call.from_user.id)

        text = _("–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:\n\n"
                 "üöª –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user_2}\n"
                 "üîû –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {user_0}-{user_1} –ª–µ—Ç\n\n"
                 "üèôÔ∏è –ì–æ—Ä–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user_3}").format(
            user_2=user_data[2],
            user_0=user_data[0],
            user_1=user_data[1],
            user_3=user_data[3]
        )
        await call.message.edit_text(text,
                                     reply_markup=await dating_filters_keyboard())
    if call is None:
        user_data = await get_data_filters(message.from_user.id)
        text = _("–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:\n\n"
                 "üöª –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user_2}\n"
                 "üîû –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {user_0}-{user_1} –ª–µ—Ç\n\n"
                 "üèôÔ∏è –ì–æ—Ä–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {user_3}").format(
            user_2=user_data[2],
            user_0=user_data[0],
            user_1=user_data[1],
            user_3=user_data[3]
        )
        await message.answer(text,
                             reply_markup=await dating_filters_keyboard())


async def registration_menu(call, scheduler, send_message_week, load_config, random):
    """

    """
    user_db = await db_commands.select_user(telegram_id=call.from_user.id)
    support = await db_commands.select_user(telegram_id=load_config().tg_bot.support_ids[0])
    markup = await start_keyboard(user_db["status"])
    heart = random.choice(['üíô', 'üíö', 'üíõ', 'üß°', 'üíú', 'üñ§', '‚ù§', 'ü§ç', 'üíñ', 'üíù'])
    await call.message.edit_text(_("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {fullname}!!\n\n"
                                   "{heart} <b> QueDateBot </b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n\n"
                                   "ü™ß –ù–æ–≤–æ—Å—Ç–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ - "
                                   "https://t.me/QueDateGroup \n\n"
                                   "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                                   "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - "
                                   "@{supports}\n\n").format(fullname=call.from_user.full_name, heart=heart,
                                                             supports=support['username']),
                                 reply_markup=markup)
    scheduler.add_job(send_message_week, trigger="interval", weeks=3, jitter=120, args={call.message})


async def finished_registration(state: FSMContext, telegram_id: int, message: types.Message):
    """

    """
    await state.finish()
    await db_commands.update_user_data(telegram_id=telegram_id, status=True)
    user_data = await get_data(telegram_id)
    user_db = await db_commands.select_user(telegram_id=telegram_id)
    markup = await start_keyboard(status=user_db['status'])

    text = _(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! \n\n "
             "{user_0}, "
             "{user_1} –ª–µ—Ç, "
             "{user_3}\n\n"
             "<b>–û —Å–µ–±–µ</b> - {user_5}").format(user_0=str(user_data[0]), user_1=str(user_data[1]),
                                                user_3=str(user_data[3]),
                                                user_5=str(user_data[5]))

    await message.answer_photo(caption=text,
                               photo=user_db.get('photo_id'), reply_markup=ReplyKeyboardRemove())
    await message.answer("–ú–µ–Ω—é: ", reply_markup=markup)


async def saving_normal_photo(message: types.Message, telegram_id: int, file_id: int, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã
    """
    try:
        await db_commands.update_user_data(telegram_id=telegram_id, photo_id=file_id)

        await message.answer(_("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!"))
    except Exception as err:
        logger.error(err)
        await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. \n"
                               "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."))
    await finished_registration(state, telegram_id, message)


async def saving_censored_photo(message: types.Message, telegram_id: int, state: FSMContext,
                                out_path: Union[str, pathlib.Path], flag: Union[str, None] = "registration",
                                markup: Union[InlineKeyboardMarkup, None] = None):
    """
    –§—É–Ω–∫—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ü–µ–Ω–∑—É—Ä–æ–π
    """
    photo = InputFile(out_path)
    id_photo = await bot.send_photo(chat_id=telegram_id,
                                    photo=photo,
                                    caption=_("–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!\n"
                                              "–ü–æ—ç—Ç–æ–º—É –º—ã —á—É—Ç—å-—á—É—Ç—å –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"))
    file_id = id_photo['photo'][0]['file_id']
    await asyncio.sleep(1)
    try:
        await db_commands.update_user_data(telegram_id=telegram_id, photo_id=file_id)

    except Exception as err:
        logger.error(err)
        await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. \n"
                               "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."))
    if flag == "change_datas":
        await message.answer(_("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!"), reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(3)
        await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: "), reply_markup=markup)
        await state.reset_state()
    elif flag == "registration":
        await finished_registration(state, telegram_id, message)


async def update_normal_photo(message: types.Message, telegram_id: int, file_id: int, state: FSMContext,
                              markup):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        await db_commands.update_user_data(telegram_id=telegram_id, photo_id=file_id)
        await message.answer(_("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!"), reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(3)
        await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: "), reply_markup=markup)
        await state.reset_state()
    except Exception as err:
        logger.error(err)
        await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. \n"
                               "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."))
