import asyncio
import pathlib
from typing import NoReturn, Union, Optional

import asyncpg
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, ReplyKeyboardRemove, InputFile, InlineKeyboardMarkup
from loguru import logger

from keyboards.inline.filters_inline import dating_filters_keyboard
from keyboards.inline.main_menu_inline import start_keyboard
from loader import _, bot
from utils.db_api import db_commands


async def choice_gender(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∞—è –≤ –±–∞–∑—É –ø–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    """
    if call.data == 'male':
        try:
            await db_commands.update_user_data(telegram_id=call.from_user.id, need_partner_sex='–ú—É–∂—Å–∫–æ–π')
        except asyncpg.exceptions.UniqueViolationError as err:
            logger.error(err)
    elif call.data == 'female':
        try:
            await db_commands.update_user_data(telegram_id=call.from_user.id, need_partner_sex='–ñ–µ–Ω—Å–∫–∏–π')
        except asyncpg.exceptions.UniqueViolationError as err:
            logger.error(err)


async def display_profile(call: CallbackQuery, markup) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user = await db_commands.select_user(telegram_id=call.from_user.id)
    user_verification = "‚úÖ" if user["verification"] else "‚ùå"
    user_info_template = "{}, {} –ª–µ—Ç, {} {}\n\n{}"
    text = user_info_template.format(user["varname"], user["age"], user["city"], user_verification,
                                     user["commentary"])
    text_2 = user_info_template.format(user["varname"], user["age"], user["city"], user_verification,
                                       user["commentary"]) + "\n\n<b>–ò–Ω—Å—Ç–∞–≥—Ä–∞–º</b> - <code>{}</code>\n".format(
        user["instagram"])
    text_3 = user_info_template.format(user["varname"], user["age"], user["city"], user_verification, "")

    if user["voice_id"] is None and user["instagram"] is None:
        caption = text
    elif user["voice_id"] is None:
        caption = text_2
    elif user["voice_id"] and user["instagram"] is None:
        caption = text_3
        await call.message.answer_voice(user["voice_id"], caption=_("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã"))
    else:
        caption = text_2
        await call.message.answer_voice(user["voice_id"], caption=_("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã"))
    await call.message.answer_photo(caption=caption, photo=user["photo_id"], reply_markup=markup)


async def show_dating_filters(
        call: Optional[CallbackQuery] = None,
        message: Optional[types.Message] = None
) -> None:
    user_id = call.from_user.id if call else message.from_user.id
    user = await db_commands.select_user(telegram_id=user_id)
    markup = await dating_filters_keyboard()

    text = _("–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:\n\n"
             "üöª –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {}\n"
             "üîû –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {}-{} –ª–µ—Ç\n\n"
             "üèôÔ∏è –ì–æ—Ä–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {}").format(
        user.get("need_partner_sex"),
        user.get("need_partner_age_min"),
        user.get("need_partner_age_max"),
        user.get("need_city"),
    )
    if call:
        await call.message.edit_text(text, reply_markup=markup)
    else:
        await message.answer(text, reply_markup=markup)


# TODO: Add type hint
async def registration_menu(call, scheduler, send_message_week, load_config, random) -> None:
    user_db = await db_commands.select_user(telegram_id=call.from_user.id)
    support = await db_commands.select_user(telegram_id=load_config().tg_bot.support_ids[0])
    markup = await start_keyboard(user_db["status"])
    heart = random.choice(['üíô', 'üíö', 'üíõ', 'üß°', 'üíú', 'üñ§', '‚ù§', 'ü§ç', 'üíñ', 'üíù'])
    await call.message.edit_text(_("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {fullname}!!\n\n"
                                   "{heart} <b> QueDateBot </b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n\n"
                                   "ü™ß –ù–æ–≤–æ—Å—Ç–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ - "
                                   "https://t.me/QueDateGroup \n\n"
                                   "<b>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ: </b>\n"
                                   "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ, –ø–∏—à–∏—Ç–µ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - "
                                   "@{supports}\n\n").format(fullname=call.from_user.full_name, heart=heart,
                                                             supports=support['username']),
                                 reply_markup=markup)
    scheduler.add_job(send_message_week, trigger="interval", weeks=3, jitter=120, args={call.message})


async def finished_registration(state: FSMContext, telegram_id: int, message: types.Message) -> None:
    await state.finish()
    await db_commands.update_user_data(telegram_id=telegram_id, status=True)

    user = await db_commands.select_user(telegram_id=telegram_id)

    markup = await start_keyboard(status=user.get("status"))

    text = _(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! \n\n "
             "{}, "
             "{} –ª–µ—Ç, "
             "{}\n\n"
             "<b>–û —Å–µ–±–µ</b> - {}").format(user.get("varname"), user.get("age"),
                                          user.get("city"),
                                          user.get("commentary"))

    await message.answer_photo(caption=text,
                               photo=user.get('photo_id'), reply_markup=ReplyKeyboardRemove())
    await message.answer("–ú–µ–Ω—é: ", reply_markup=markup)


async def saving_normal_photo(message: types.Message, telegram_id: int, file_id: int, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ü–µ–Ω–∑—É—Ä—ã
    """
    try:
        await db_commands.update_user_data(telegram_id=telegram_id, photo_id=file_id)

        await message.answer(_("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!"))
    except Exception as err:
        logger.error(err)
        await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. \n"
                               "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."))
    await finished_registration(state, telegram_id, message)


async def saving_censored_photo(message: types.Message, telegram_id: int, state: FSMContext,
                                out_path: Union[str, pathlib.Path], flag: Union[str, None] = "registration",
                                markup: Union[InlineKeyboardMarkup, None] = None) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ü–µ–Ω–∑—É—Ä–æ–π
    """
    photo = InputFile(out_path)
    id_photo = await bot.send_photo(chat_id=telegram_id,
                                    photo=photo,
                                    caption=_("–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ –º—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!\n"
                                              "–ü–æ—ç—Ç–æ–º—É –º—ã —á—É—Ç—å-—á—É—Ç—å –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"))
    file_id = id_photo['photo'][0]['file_id']
    await asyncio.sleep(1)
    try:
        await db_commands.update_user_data(telegram_id=telegram_id, photo_id=file_id)

    except Exception as err:
        logger.error(err)
        await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. \n"
                               "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."))
    if flag == "change_datas":
        await message.answer(_("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!"), reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(3)
        await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: "), reply_markup=markup)
        await state.reset_state()
    elif flag == "registration":
        await finished_registration(state, telegram_id, message)


async def update_normal_photo(
        message: types.Message,
        telegram_id: int,
        file_id: int,
        state: FSMContext,
        markup) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        await db_commands.update_user_data(telegram_id=telegram_id, photo_id=file_id)
        await message.answer(_("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!"), reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(3)
        await message.answer(_("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: "), reply_markup=markup)
        await state.reset_state()
    except Exception as err:
        logger.error(err)
        await message.answer(_("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. \n"
                               "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–≥–µ–Ω—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."))
